@model X.PagedList.IPagedList<WebBanHang.Models.Product>
@using X.PagedList.Mvc.Core;
@{
    var showCategoryPagination = ViewBag.CategoryId != null; // Kiểm tra xem có categoryId không
    var showMenuPagination = ViewBag.MenuId != null; // Kiểm tra xem có menuId không
    // Group products by category
    int numOfQuantity = 1;
    var isLikedDict = ViewBag.IsLiked as Dictionary<int, bool>;
}
<div class="menuincatecory">
    <partial name="MenuPartial" />

<ul>
 
    <div class="container px-4 px-lg-5 mt-5">
        <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
            @foreach (var item in Model)
            {
                    if (item.LuongTonKho > 0)
                    {
                        bool isLiked = isLikedDict != null && isLikedDict.ContainsKey(item.Id) && isLikedDict[item.Id];
                        <div class="col mb-5">
                            <div class="card gap-3" style="width: 18rem;">
                                <div class="card-img-wrapper" onmouseover="zoomIn(this)" onmouseout="zoomOut(this)">
                                    <img src="@item.ImageUrl" class="card-img-top" alt="...">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </h5>
                                    <div class="d-flex">
                                        <span>Price: </span>
                                        <p class="mx-3">@item.Price.ToString("#,##0") Vnđ</p>
                                    </div>
                                    <a asp-controller="ShoppingCart" asp-action="AddToCart" asp-route-productId="@item.Id" asp-route-quantity="@numOfQuantity">
                                        <button class="btn btn-outline-dark"> <i class="bi-cart-fill me-1"></i> </button>
                                    </a>
                                    <a asp-controller="Home" asp-action="Detail" class="btn btn-primary font-control" asp-route-id="@item.Id">chi tiết</a>
                                    <form>
                                        @Html.AntiForgeryToken()
                                        <button class="likeButton" type="button" data-product-id="@item.Id">
                                            @(isLiked ? "Unlike" : "Like")
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col mb-5">
                            <div class="card gap-3" style="width: 18rem;">
                                <div class="card-img-wrapper" onmouseover="zoomIn(this)" onmouseout="zoomOut(this)">
                                    <img src="@item.ImageUrl" class="card-img-top" alt="...">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">
                                        @Html.DisplayFor(modelItem => item.Name)
                                    </h5>
                                    <div class="d-flex">
                                        <span>Price: </span>
                                        <p class="mx-3">@item.Price.ToString("#,##0") Vnđ</p>
                                    </div>

                                    <div class="alert alert-warning" role="alert">
                                        Hết hàng
                                    </div>

                                </div>
                            </div>
                        </div>

                    }
            }
        </div>
    </div>
</ul>
</div>
<<script>
     function zoomIn(element) {
         element.style.transform = "scale(1.1)"; // Phóng to khung
     }

     function zoomOut(element) {
         element.style.transform = "scale(1)"; // Thu nhỏ khung khi di chuột ra khỏi
     }
</script>
<style>
    .card-img-wrapper {
        height: 300px;
        width: 18rem;
        overflow: hidden;
        transition: transform 0.3s ease; /* Thêm hiệu ứng chuyển đổi mượt mà */
    }

        .card-img-wrapper:hover {
            transform: scale(1.1); /* Phóng to khung khi di chuột vào */
        }

    .card-img-top {
        height: 100%;
        width: 100%;
        object-fit: cover; /* Đảm bảo tỉ lệ hình ảnh không bị biến dạng */
    }
</style>

<script>
    function toggleSortOptions() {
        var sortOptions = document.getElementById('sortOptions');
        if (sortOptions.style.display === 'none' || sortOptions.style.display === '') {
            sortOptions.style.display = 'block';
        } else {
            sortOptions.style.display = 'none';
        }
    }
</script>
@if (showCategoryPagination)
{
    <div>
        @Html.PagedListPager(Model, page => Url.Action("Productcategory", new { page, categoryId = ViewBag.CategoryId }))
    </div>
}
else if (showMenuPagination)
{
    <div>
        @Html.PagedListPager(Model, page => Url.Action("ProductcategoryByMenu", new { page, menuId = ViewBag.MenuId }))
    </div>
}
else
{
    <div>
        @Html.PagedListPager(Model, page => Url.Action("MostLikedProducts", new { page }))
    </div>
}
